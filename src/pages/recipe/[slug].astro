---
export const prerender = true

import type { GetStaticPaths } from "astro";
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';
import { notion } from '../../lib/notion/client';
import type { Block } from '../../types/block';
import type { Post } from '../../types/post';


export async  function getStaticPaths()  {
   const response = await notion.databases.query({
      database_id: import.meta.env.NOTION_DATABASE_ID,
   })
  
   const posts = response.results as Post[]
   
   return posts.map((post) => ({
         params: {
            slug: post.id,
         },
      }))
    
}

const { slug } = Astro.params as { slug: string };


const response = await notion.pages.retrieve({
      page_id: slug,
   });
   // get block children
   const blockChildren = await notion.blocks.children.list({
      block_id: slug,
   });

   const blocks = blockChildren.results as Block[];
   const post = response as Post;

   let listNumber = 0;
---

<Layout title={post.properties.name.title[0].plain_text}>
   <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
      <img
         class="rounded-lg"
         src={post.properties.URL.url}
         alt={post.id}
         width={486}
         height={686}
         style={{ objectFit: 'cover' }
         }
      />
      <div>
         <h1 class="text-6xl font-bold py-6">{post.properties.name.title[0].plain_text}</h1>
         <span class="line-clamp-2 text-sm text-ellipses ">
            {post.properties.description.rich_text[0].plain_text}
         </span>
         <div class="flex gap-12 py-6">
            {/* clock icon */}
            <div class="flex gap-2">
               <!-- <Icons.clock className="h-5 w-5" /> -->
               <span class="text-sm ">{post.properties.time_in_minutes.rich_text[0]?.plain_text}</span>
            </div>
            {/* people icon */}
            <div class="flex gap-2">
               <!-- <Icons.people className="h-5 w-5" /> -->
               <span class="text-sm ">{post.properties.servings.rich_text[0]?.plain_text}</span>
            </div>
         </div>
      </div>
   </div>
   <!-- <div class="py-6">
      {blocks.map((block) => {

         if (block.type !== "numbered_list_item") {
            listNumber = 0;
         }

         switch (block.type) {
            case "paragraph":
               return <Paragraph block={block} />;
            case "heading_1":
               return <Heading1 block={block} />;
            case "heading_2":
               return <Heading2 block={block} />;
            case "heading_3":
               return <Heading3 block={block} />;
            case "bulleted_list_item":
               return <BulletedListItem block={block} />;
            case "numbered_list_item":
               return (
                  listNumber++,
                  <NumberedListItem block={block} listNumber={listNumber} />
               );
            default:
               return null;
         }
      })}
   </div> -->
</div>


</Layout>
<!-- 
const Paragraph = ({ block }: { block: Block }) => <p className="py-6 text-sm" key={block.id}>{block.paragraph.rich_text[0]?.plain_text}</p>;
const Heading1 = ({ block }: { block: Block }) => <h1 className="text-3xl font-bold py-4" key={block.id}>{block.heading_1.rich_text[0].plain_text}</h1>;
const Heading2 = ({ block }: { block: Block }) => <h2 className="text-2xl font-bold py-4" key={block.id}>{block.heading_2.rich_text[0].plain_text}</h2>;
const Heading3 = ({ block }: { block: Block }) => <h3 className="text-xl font-bold py-2" key={block.id}>{block.heading_3.rich_text[0].plain_text}</h3>;
const BulletedListItem = ({ block }: { block: Block }) => <p className="py-1 text-sm" key={block.id}>{block.bulleted_list_item.rich_text[0]?.plain_text}</p>;
const NumberedListItem = ({ block, listNumber }: { block: Block, listNumber: number }) => <span className="py-1 text-sm" key={block.id}>{listNumber}. {block.numbered_list_item.rich_text[0]?.plain_text} <br /></span>;
       -->